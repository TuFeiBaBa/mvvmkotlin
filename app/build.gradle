apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply plugin: 'android-aspectjx'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        applicationId "com.tufei.mvvmkotlin"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android {
        testOptions {
            unitTests {
                includeAndroidResources = true
            }
        }
    }

    androidExtensions {
        experimental = true
    }

    dataBinding {
        enabled = true
    }

    //robolectric错误
    //https://stackoverflow.com/questions/32315978/jvm-options-in-android-when-run-gradlew-test/37593189#37593189
    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
        }
    }

    flavorDimensions "default"
    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            dimension "default"
            applicationIdSuffix = ".mock"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    //signingConfigs代码块一定要写在buildTypes前面，否则会报下面这种错：
    //Could not find property 'debugConfig' on SigningConfig container.
    signingConfigs {
        //如果是线上项目，直接保存在这里，肯定不恰当，应当在当前project下创建
        // 一个signing.properties文件，把相关配置放在里面
        //release {//发布版本的签名配置
        //    storeFile file(props['KEYSTORE_FILE'])
        //    keyAlias props['KEY_ALIAS']
        //    storePassword props['KEYSTORE_PWD']
        //    keyPassword props['KEY_PWD']
        //}

        //签名配置文件signing.properties：
        //KEYSTORE_FILE = mvvmkotlin.jks
        //KEY_ALIAS = key0
        //KEYSTORE_PWD= abcdefg123456
        //KEY_PWD= abcdefg123456

        release {
            storeFile file ("mvvmkotlin.jks")
            storePassword "abcdefg123456"
            keyAlias "key0"
            keyPassword "abcdefg123456"
        }
    }

    buildTypes {
        release {
            signingConfig  signingConfigs.release
            minifyEnabled true
            //zipAlign可以让安装包中的资源按4字节对齐，这样可以减少应用在运行时的内存消耗。
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //打包apk重命名
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == 'release') {
                outputFileName = "mvvm-kotlin_${variant.versionName}.apk"
            }
        }
    }
}

aspectjx {
    excludeJarFilter '.jar'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayoutVersion"

    //room
    implementation "android.arch.persistence.room:runtime:$roomVersion"
    kapt "android.arch.persistence.room:compiler:$roomVersion"
    implementation "android.arch.persistence.room:rxjava2:$roomVersion"

    //aspectj
    implementation "org.aspectj:aspectjrt:$aspectjVersion"

    //databinding(覆盖。避免它自动使用annotationProcessor)
    kapt 'com.android.databinding:compiler:3.0.1'

    implementation "android.arch.lifecycle:extensions:$rootProject.archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$rootProject.archLifecycleVersion"

    //dagger2
    implementation "com.google.dagger:dagger:$daggerVersion"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"

    // if you use the support libraries
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    //RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"

    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"
    implementation "io.reactivex.rxjava2:rxkotlin:$rxkotlinVersion"

    //retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:retrofit-converters:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    //gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    //okhttp(Retrofit默认引用okhttp，没必要再引用)
    //implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    testImplementation "com.squareup.okhttp3:mockwebserver:3.10.0"
    implementation "com.squareup.okhttp3:logging-interceptor:$logInterceptorVersion"
    androidTestImplementation "junit:junit:$junitVersion"
    testImplementation "junit:junit:$junitVersion"

    //robolectric
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.robolectric:shadows-support-v4:3.3.2"

    //mockito
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    //powermock
    testImplementation "org.powermock:powermock-core:$powermockVersion"
    testImplementation "org.powermock:powermock-module-junit4:$powermockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powermockVersion"

    //同时使用robolectric和powermock需要这些依赖
    testImplementation "org.powermock:powermock-classloading-xstream:$powermockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powermockVersion"

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"

    // Android Testing Support Library's runner and rules
    androidTestImplementation "com.android.support.test:runner:$runnerVersion"
    androidTestImplementation "com.android.support.test:rules:$rulesVersion"
    androidTestImplementation "android.arch.persistence.room:testing:$roomVersion"
    androidTestImplementation "android.arch.core:core-testing:$archcoreVersion"

    testImplementation "android.arch.core:core-testing:$archcoreVersion"

}